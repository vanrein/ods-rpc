#!/usr/bin/env python
#
# ods-wepapi -- A HTTP wrapper around a management interface for OpenDNSSEC.
#
# From: Rick van Rein <rick@openfortress.nl>


import os
import sys
import time
import pwd
import grp

import socket
import base64
import json
import jose

from syslog import *
import signal

import BaseHTTPServer
import SocketServer


from keyconfig import keys


#
# Unpack the application/jose transmission format (one element)
#
def b64pad (b64):
	return b64 + '=' * (4 - (len(b64) % 4))

def b64bin (b64):
	return base64.urlsafe_b64decode (b64pad (b64))

def b64json (b64):
	return json.loads (b64bin (b64))


#
# The web server that accepts commands and relays them to the generic API.
#
class WebAPI (BaseHTTPServer.BaseHTTPRequestHandler):

	def do_POST (self):
		ok = True
		try:
			syslog (LOG_DEBUG, 'Received POST')
			syslog (LOG_DEBUG, 'Content-type: ' + str (self.headers ['Content-type']))
			ok = ok and self.headers ['Content-type'] == 'application/jose'
			syslog (LOG_DEBUG, 'Content-length: ' + str (self.headers ['Content-length']))
			contlen = int (self.headers ['Content-length'])
			content = self.rfile.read (contlen)
			syslog (LOG_DEBUG, 'Content: ' + str (content))
			(header,payload,signature) = content.split ('.')
			syslog (LOG_DEBUG, 'JOSE header: ' + str (header))
			syslog (LOG_DEBUG, 'JOSE payload: ' + str (payload))
			syslog ('JOSE signature: ' + str (signature))
			signeddata = {
				'header'   : b64pad (header   ),
				'payload'  : b64pad (payload  ),
				'signature': b64pad (signature),
			}
			signeddata = jose.JWS (
				header,
				payload,
				signature,
			)
			syslog (LOG_DEBUG, 'Signed data: ' + str (signeddata))
			josehdrs = b64json (header)
			syslog (LOG_DEBUG, 'Headers: ' + str (josehdrs))
			syslog (LOG_DEBUG, 'Header ["kid"]: ' + str (josehdrs ['kid']))
			jwks = [ keys [k]
				for k in keys.keys ()
				if k == josehdrs ['kid']
			]
			syslog (LOG_DEBUG, 'Keys: ' + str (jwks))
			age = time.time () - float (josehdrs ['timestamp'])
			syslog (LOG_DEBUG, 'age: ' + str (age))
			ok = ok and -50 < age < 60
		except Exception, e:
			syslog (LOG_ERR, 'EXCEPTION: ' + str (e))
		if ok:
			ok = False
			for jwk in jwks:
				try:
					syslog (LOG_DEBUG, 'VERIFICATION:')
					syslog (LOG_DEBUG, 'signeddata = ' + str (signeddata))
					syslog (LOG_DEBUG, 'jwk = ' + str (jwk))
					jwt = jose.verify (signeddata, jwk)
					syslog (LOG_DEBUG, 'DONE / JWT = ' + str (jwt))
					ok = True
				except Exception, e:
					syslog (LOG_INFO, 'VERIFICATION EXCEPTION: ' + str (e))
					ok = False
		# at this point, "ok" signifies correct verification
		resp = None
		if ok:
			syslog (LOG_INFO, 'COMMAND = ' + str (cmd))
			resp = run_command (jwt.claims, josehdrs ['kid'])
			syslog (LOG_INFO, 'RESPONSE = ' + str (resp))
		ok = ok and resp is not None
		if ok:
			# JWS signing with header ['kid']
			# Note that this assumes symmetric keys; would need to
			# configure peer2key mappings for asymmetric keys.
			reqhdr = {
				'cty': 'application/json',
				'kid': josehdrs ['kid'],   #TODO# SYMMETRIC
				'timestamp': time.time ()
			}
			req = jose.sign (resp,
				jwks [0],		   #TODO# SYMMETRIC
				add_header = reqhdr)
			response = '.'.join (req)
			syslog (LOG_DEBUG, 'Content: ' + str (content))
			
		if ok:
			self.send_response (200)
			self.end_headers ()
			self.wfile.write (response)
		else:
			self.send_response (400)

	def log_success (self, fmt, *args):
		syslog (LOG_INFO, fmt % args)

	def log_error (self, fmg, *args):
		syslog (LOG_ERR, fmt % args)

 	def log_message (self, fmt, *args):
		syslog (LOG_NOTICE, fmt % args)

#
# Fork to the background
#
pid = os.fork ()
if pid == -1:
	syslog (LOG_ERR, 'ERROR: Failed to fork background process')
	sys.exit (1)
elif pid != 0:
	open ('/home/odsrpc/ods-webapi.pid', 'w').write (str (pid))
	sys.exit (0)
os.setsid ()
os.close (0)
os.close (1)
os.close (2)

#
# Capture KILL responses
#
loop_forever = True
def handle_SIGTERM (kill_signum, frame):
	global loop_forever
	loop_forever = False
	if srv:
		srv.server_close ()
	syslog (LOG_INFO, 'Terminating service')
	sys.exit (0)
signal.signal (signal.SIGTERM, handle_SIGTERM)

#
# Open the syslog interface with our program name
#
openlog ('ods-webapi',
		# LOG_PID | LOG_PERROR,
		LOG_PID,
		LOG_DAEMON)

#
# The HTTP service main loop
#
from genericapi import run_command
retry = time.time () + 60
srv = None
while loop_forever:
	try:
		srv = SocketServer.TCPServer ((socket.gethostbyname (), 8998), WebAPI)
		if os.getuid () == 0:
			uid = pwd.getpwnam ('odsrpc').pw_uid
			gid = grp.getgrnam ('odsrpc').gr_gid
			os.setgroups ([])
			os.setgid (gid)
			os.setuid (uid)
		syslog (LOG_INFO, 'Connections welcomed')
		srv.serve_forever ()
	except IOError, ioe:
		if time.time () < retry:
			if ioe.errno in [48,98]:
				syslog (LOG_WARNING, 'Found socket locked...')
				time.sleep (5)
				continue
		raise
	break
if srv:
	srv.server_close ()

