#!/usr/bin/env python
#
# ods-webclient -- Perform an action on a zone through an API
#
# The default API is the Web API.  The keys are loaded from the same place
# as used by the ods-webapi frontend.
#
# From: Rick van Rein <rick@openfortress.nl>


import sys
import time

import httplib

import base64
import json
import jose


from keyconfig import keys


#
# Unpack the application/jose transmission format (one element)
#
def b64pad (b64):
	return b64 + '=' * (4 - (len(b64) % 4))

def b64bin (b64):
	return base64.urlsafe_b64decode (b64pad (b64))

def b64json (b64):
	return json.loads (b64bin (b64))


#
# Commandline check
#
if len (sys.argv) < 3:
	sys.stderr.write ('Usage: ' + sys.argv [0] + ' <command> <zone>...\n')
	sys.exit (1)
command = sys.argv [1]
zones = sys.argv [2:]
kid = keys.keys () [0]
print 'Command:', command
print 'Key id: ', kid
print 'Zones:  ', ' '.join (zones)


#
# Construct JOSE command
#
cmd = {
	'command': command,
	'zones': zones,
}
reqhdr = {
	'cty': 'application/json',
	'kid': kid,
	'timestamp': time.time (),
}
req = jose.sign (cmd, keys [kid], add_header = reqhdr)
content = '.'.join (req)
print 'Content:', content

#
# Send the request over HTTP, method POST, and harvest the response
#
http = httplib.HTTPConnection ('localhost', 8000)
http.request ('POST', '/', content, { 'Content-type': 'application/jose' })
htresp = http.getresponse ()
print 'Status: ', htresp.status, htresp.reason
if htresp.status == 200:
	resp = htresp.read ()
	print 'Receivd:', resp
else:
	sys.exit (1)

#
# Verify and extract the response
#
ok = True
(header,payload,signature) = resp.split ('.')
print 'JOSE header:', header
print 'JOSE payload:', payload
print 'JOSE signature:', signature
signeddata = {
	'header'   : b64pad (header   ),
	'payload'  : b64pad (payload  ),
	'signature': b64pad (signature),
}
signeddata = jose.JWS (
	header,
	payload,
	signature,
)
print 'Signed data:', signeddata
josehdrs = b64json (header)
print 'Headers:', josehdrs
jwks = [ keys [k]
	for k in keys.keys ()
	if k == josehdrs ['kid']
]
print 'Keys:', jwks
age = time.time () - float (josehdrs ['timestamp'])
print 'age:', age
ok = ok and -50 < age < 60
if ok:
	ok = False
	for jwk in jwks:
		try:
			print 'VERIFICATION:'
			print 'signeddata =', signeddata
			print 'jwk =', jwk
			jwt = jose.verify (signeddata, jwk)
			print 'DONE / JWT =', jwt
			ok = True
		except Exception, e:
			print 'VERIFICATION EXCEPTION:', e
# at this point, "ok" signifies correct verification
if ok:
	print 'Response:', jwt.claims
