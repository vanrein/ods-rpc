#!/usr/bin/env python
#
# ods-wepapi -- A HTTP wrapper around a management interface for OpenDNSSEC.
#
# From: Rick van Rein <rick@openfortress.nl>


import os
import sys
import time

from syslog import *
import signal

import json

import BaseHTTPServer
import SocketServer


from genericapi import run_command
from keyconfig import keys


#
# The web server that accepts commands and relays them to the generic API.
#
class WebAPI (BaseHTTPServer.BaseHTTPRequestHandler):
 
	def do_POST (self):
		ok = True
		try:
			syslog (LOG_DEBUG, 'Received POST')
			syslog (LOG_DEBUG, 'Content-type: ' + str (self.headers ['Content-type']))
			ok = ok and self.headers ['Content-type'] == 'application/json'
			syslog (LOG_DEBUG, 'Content-length: ' +  str (self.headers ['Content-length']))
			contlen = int (self.headers ['Content-length'])
			content = self.rfile.read (contlen)
		except Exception, e:
			syslog (LOG_ERR, 'EXCEPTION: ' + str (e))
		# at this point, "ok" signifies correct reception w/o validation
		resp = None
		syslog (LOG_INFO, 'CONTENT = ' + str (content))
		cmd = json.loads (content)
		if ok:
			syslog (LOG_INFO, 'COMMAND = ' + str (cmd))
			resp = run_command (cmd, 'nobody')
			syslog (LOG_INFO, 'RESPONSE = ' + str (resp))
		ok = ok and resp is not None
		if ok:
			response = json.dumps (resp)
		if ok:
			self.send_response (200)
			self.end_headers ()
			self.wfile.write (response)
		else:
			self.send_response (400)


#
# Fork to the background
#
pid = os.fork ()
if pid == -1:
	syslog (LOG_ERR, 'ERROR: Failed to fork background process')
	sys.exit (1)
elif pid != 0:
	open ('/var/run/ods-webapi.pid', 'w').write (str (pid))
	sys.exit (0)
os.setsid ()

#
# Capture KILL responses
#
loop_forever = True
def handle_SIGTERM (kill_signum, frame):
	global loop_forever
	loop_forever = False
	if srv:
		srv.server_close ()
	syslog (LOG_INFO, 'Terminating service')
	sys.exit (0)
signal.signal (signal.SIGTERM, handle_SIGTERM)

#
# Open the syslog interface with our program name
#
openlog ('ods-webapi-unprotected',
		# LOG_PID | LOG_PERROR,
		LOG_PID,
		LOG_DAEMON)

#
# The HTTP service main loop
#
retry = time.time () + 60
srv = None
while loop_forever:
	try:
		srv = SocketServer.TCPServer (('adleman.surfdomeinen.nl', 8998), WebAPI)
		syslog (LOG_INFO, 'Connections welcomed')
		srv.serve_forever ()
	except IOError, ioe:
		if time.time () < retry:
			if ioe.errno in [48,98]:
				syslog (LOG_WARNING, 'Found socket locked...')
				time.sleep (5)
				continue
		raise
	break
if srv:
	srv.server_close ()

